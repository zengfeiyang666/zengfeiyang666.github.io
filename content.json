{"pages":[{"title":"About me","text":"","link":"/about/me.html"},{"title":"","text":"[{\"img\":\"/json-data/banner/lonelyreader.png\",\"url\":\"https://lonelyreader.com\",\"alt\":\"孤独的阅读者\"},{\"img\":\"/json-data/banner/blog-build.png\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=89247\",\"alt\":\"博客搭建视频教程\"},{\"img\":\"/json-data/banner/git-github.jpg\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=84534\",\"alt\":\"让你彻底理解Git视频教程\"}]","link":"/json-data/main-banner.json"},{"title":"美好瞬间","text":"","link":"/photo/index.html"}],"posts":[{"title":"Hexo博客中图片显示问题","text":"1. 发现问题在HEXO发布的博文中，查看网页中的文章时，发现文章中的图片均不能查看，只是显示了图片的标题问题，查看控制台中的请求的数据发现，文章页面中的图片资源均是加载失败，对于在HEXO博客中的问题图片问题进行分析解决； 2. 解决问题方法 把HEXO配置文件 _config.yml中的post_asset_folder属性以及 permalink 属性， 1234# 是否启动资源文件夹，开启后通过 hexo new title ,(title为文章标题)生成新文章会建立一个同名的文件夹post_asset_folder: true# 生成文章链接的格式，这是默认的格式；修改的规则也比较简单，标签前面要加英文冒号；（注意图片资源生成的格式必须是这个格式，否则会出现图片加载失败的情况）permalink: :year/:month/:day/:title/ ​ 2.安装一个可以上传本地图片的插件，在HEXO项目的根目录下输入 1sudo npm install https://github.com/CodeFalling/hexo-asset-image --save ​ 3.再运行 hexo new post title 来生成 _posts 目录的MD文档时，在 /source/_posts 文件夹内会 建立一个与title文件同名的文件夹，结构如下 1234文章名称├── bird.jpg└── mouse.jpg文章名称.md ​ 4.在title.md文档中想引入图片时，先把图片复制到title.md这个文件夹中，然后只需要在文档中按照 markdown 的格式引入图片即可，如下： 1![图片标题](title/name.jpg) ​ 5.执行hexo打包命令hexo g，可以在本地项目根目录下的public文件夹查看生成的文件形式，再执行上传 命令hexo d后，就能在网页上查看到文字的图片资源了； ​ 6.打开博客文章的网页控制台，可以查看到图片资源引入的格式为： 1&lt;img src=\"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/%E5%8F%91%E5%B8%83%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"&gt; 最后完成了博客文章的图片资源的显示，如下图所示：","link":"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"},{"title":"Hexo搭建博客，注册域名，部署到GitHub","text":"1、Hexo搭建博客步骤暂时略过 2、注册域名 在腾讯云购买域名flymoon1028.com. 进行实名认证，域名备案（我申报后大概3小时就通过了，这个根据情况而定）。 备案通过后进行域名解析1）打开iTerm,输入ping命令，得到github上博客IP地址 1ping zengfeiyang666.github.io 得到GitHub博客的IP地址185.199.109.153 2）登录腾讯云平台，进行域名解析 4.GitHub和域名绑定 ​ 1）登录github博客项目，在博客根目录下创建文件名为：CNAME的文件，内容为域名： ​ www.flymoon1028.com ​ 3、通过绑定好的域名访问博客","link":"/2020/03/27/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/"},{"title":"Mac中执行svn命令失效","text":"今天到公司，打开IDEA准备从SVN更新代码，显示无法连接SVN。What?搞什么鬼！ 打开iTerm,输入svn –version，想看一下svn版本号，确认一下svn是否真不可用了，果不其然，效果如图： 看到这个报错，以为没有安装Xcode,晚上搜索了下，执行xcode-select –install命令，提示如图： 可见，xcode没问题，接下来又是一顿各种搜索，什么重装xcode、重装comman line，貌似都不起作用。 经过一上午折腾，最终根据一篇博文提示，要不用brew重装一下svn，试下再说吧。 安装一切顺利，接下来再执行一下svn –version命令 svn命令正常了！ 又可以在IDEA中用svn愉快地提交代码了！ （PS：至于问题为什么这样解决，仍不是很明了，先记录一下）","link":"/2020/03/27/Mac%E4%B8%AD%E6%89%A7%E8%A1%8Csvn%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88/"},{"title":"window.open打开新窗口被浏览器拦截的处理方法","text":"​ 中台项目快上线了，昨天测试同学突然测出门户端菜单跳转点击没反应，在这之前测了那么久都没问题的，怎么就突然跳转不了了，奇了怪了。 ​ 到测试同学机器上一看，通过F12调试页面并没有查出问题，但发现地址栏右上角有个红色的X号，点开一看，跳转竟然被浏览器拦截了。同样是Chrome浏览器，我机器上好好的，测试同学进入跳转不了。于是网上一顿搜索，发现竟然是浏览器出于安全考虑，屏蔽了非用户操作的window.open()操作。参考如下几篇博文描述： window.open打开新窗口被浏览器拦截的处理方法 window.open()被部分浏览器拦截问题 详解window.open被浏览器拦截的解决方案 参考了以上几篇博文的方法调整，部分方法也能解决问题，但是我们的业务是在跳转之前，先调ajax方法判断是否有调整权限，有权限才跳转，没权限就提示。 起初先用如下方法实现，但考虑多如果用户没权限就事先给开个窗体，没权限再关闭，用户体验不好 1234567// 打开页面，此处最好使用提示页面var newWin = window.open('_blank');ajax().done(function() { // 重定向到目标页面 newWin.location.href = 'target url';}); 就放弃了该实现形式。 后面才用了leader得方案，定义一个变量保存初始值，写个定时器刷新等待异步ajax执行结果，将页面跳转的判断还放在用户的click事件中，这样浏览器就不好拦截了，毕竟是click是用户行为。实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253enterLapp(menuId, portalUrl, name, type) { //能否打开链接，初始化值为-1 var isOpen = -1; var openUrl = ''; //判断用户是否有该菜单权限 let listQuery = { menuId: menuId }; checkShortcutValidity(listQuery) .then(res =&gt; { if (res.data &amp;&amp; res.data.errCode === 200) { if (res.data.data) { if (type == \"HTTP\") { isOpen = 1; openUrl = portalUrl; //console.log(\"跳转：isOpen=\" + isOpen + \";openUrl=\" + openUrl); } else { let routeUrl = this.$router.resolve({ path: \"/LinkPage\", query: { portalUrl } }); isOpen = 1; openUrl = routeUrl.href; //console.log(\"跳转：isOpen=\" + isOpen + \";openUrl=\" + openUrl); } } else { isOpen = 0; MessageBox.alert(\"您没有该轻应用的访问权限，请联系企业管理员设置！\",'',{confirmButtonText:'确定',type:'info'}) .then(() =&gt; {}) } } else { isOpen = 0; MessageBox.alert(\"您没有该轻应用的访问权限，请联系企业管理员设置！\",'', {confirmButtonText:'确定',type:'info'}) .then(() =&gt; {}) } }) .catch(error =&gt; {}); //开启定时器 var interval = setInterval(function(){ //console.log(\"定时器开启......\") if(isOpen === 1 || isOpen === 0){ clearInterval(interval); if(isOpen == 1){ //console.log(\"跳转：name=\" + name + \";openUrl=\" + openUrl); window.open(openUrl, name); } } }, 600);}","link":"/2020/04/10/window-open%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3%E8%A2%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8B%A6%E6%88%AA%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"},{"title":"浏览器缓存之Jquery自动给所有Ajax请求加上时间戳","text":"在使用 jQuery 请求数据时，我们可能希望它能自动附带上一些额外的参数。比如： 让所有请求自动加上时间戳，这样每次请求就不会有缓存。 或者让所有请求自动带上权限认证的 token，这样不用再为每个请求单独添加这个参数。 下面通过样例演示这个功能如何实现。 1，样例代码（1）这里我们使用 jQuery 的 ajaxSetup() 方法来进行全局配置，该方法可以为将来所有的 AJAX 请求设置默认值。（2）通过 ajaxSetup() 方法中的 beforeSend 属性可以设置发送请求前运行的函数（它会拦截所有的请求)，我们在此对 url 进行修改，增加个时间戳参数。 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=&quot;jquery-3.1.1.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //全局配置 $.ajaxSetup({ beforeSend: function(jqXHR, settings) { //在请求前给修改url（增加一个时间戳参数） settings.url += settings.url.match(/\\?/) ? &quot;&amp;&quot; : &quot;?&quot;; settings.url += &quot;token=&quot; + new Date().getTime(); }, }); //按钮点击响应 function btnClick() { $.get(&quot;data.php&quot;, {name: &quot;hangge&quot;}, function(data){ alert(data); }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;请求数据&quot; onclick=&quot;btnClick()&quot;/&gt; &lt;/body&gt;&lt;/html&gt; 2，效果图点击“请求数据”按钮发起一个简单的get请求。可以看到虽然我们一开始只设置了name 这一个参数，但最终又自动添加了个 token（时间戳）参数。","link":"/2020/03/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E4%B9%8BjQuery%E8%87%AA%E5%8A%A8%E7%BB%99%E6%89%80%E6%9C%89Ajax%E8%AF%B7%E6%B1%82%E5%8A%A0%E4%B8%8A%E6%97%B6%E9%97%B4%E6%88%B3/"},{"title":"layui-tree如何实现懒加载以及动态局部渲染子节点","text":"问题引入众所周知，layui.tree的树形控件，在渲染树节点时，需要后台准备好整个组织树的数据；如果组织树的数据量特别大，页面渲染特别慢。最近在狐小E智慧办公平台中，展示企业部门树时，就遇到这种问题；当时产品要求，部门树渲染要特别快，同时某部门下新增、删除了一个子部门时，要动态刷新，实时呈现；然而layui.tree的原始机制是，必须重新加载整个树的数据再渲染，这样就会导致展开的节点全收缩回去，而不是刚好展开到该父部门位置； 这样就有2个问题亟需优化 1）部门树数据量大、层级多时，全部渲染慢。 2）父部门添加子部门，当前父部门层级树无法做到局部更新视图； 为了解决这两个问题，我们只好修改layui.tree源码，实现这个高大上功能；废话不多说，直接上干货： 狐小E智慧办公中台后台使用的layui版本是v2.5.x,其他版本的layui源码可能有所不同，这点需注意。 解决方案步骤1：源码修改首先，在layui前端框架找到实现树组件的模块源码tree.js，如图所示： 1：打开源码，在树的主渲染方法 r.render前，添加上用于加载child节点的方法r.children，代码如下： 1234 r.children = function (e, i, d) { var a = l.that[e]; return a.children(i, d)} 效果如下图： 2：找到b.prototype.tree方法，在此方法前，添加两个用于懒加载子节点的方法： 1234567891011121314151617181920212223242526272829303132333435363738b.prototype.children = function (n1, n2) { var e = this; e.setchildrendata(e.config.data, n1, n2);}, b.prototype.setchildrendata = function (n0, n1, n2) { var e = this; var c = i('#' + e.config.id); layui.each(n0, function (a, r) { var b = c.find('div[data-id=' + r.id + ']').hasClass(C); r.spread = b; if (e.config.accordion === !0) { //手风琴模式 r.spread = !1; var cs = c.find('div[data-id=' + n1 + ']').parents('.layui-tree-set'); cs.each(function () { if (r.id === i(this).attr('data-id')) { r.spread = !0; } }); } if (r.id === n1) { r.spread = !0; if(!r.children){ r.children=[]; } if (n2.length === 0) { delete r.children; }else{ //i.extend(!0, r.children, n2); r.children = n2; } e.reload(e.config.id, e.config.data); } if (r.children) { e.setchildrendata(r.children, n1, n2); //递归子节点 } });} 3：修改b.prototype.tree方法的代码，修改后代码如下【备注：//TODO 部分标识的为修改源码部分】 123456789101112131415161718192021222324252627282930313233b.prototype.tree = function (e, a) { var n = this, t = n.config, r = a || t.data; layui.each(r, function (a, r) { //TODO 此处调整源码 //var l = r.children &amp;&amp; r.children.length &gt; 0, var l = r.children, o = i('&lt;div class=\"layui-tree-pack\" ' + (r.spread ? 'style=\"display: block;\"' : \"\") + '\"&gt;&lt;/div&gt;'), //TODO 源码调整 //h = i(['&lt;div data-id=\"' + r.id + '\" class=\"layui-tree-set' + (r.spread ? \" layui-tree-spread\" : \"\") + (r.checked ? \" layui-tree-checkedFirst\" : \"\") + '\"&gt;', '&lt;div class=\"layui-tree-entry\"&gt;', '&lt;div class=\"layui-tree-main\"&gt;', function () { h = i(['&lt;div data-id=\"' + r.id + '\" data-parent-id=\"' + r.parentId + '\" class=\"layui-tree-set' + (r.spread ? \" layui-tree-spread\" : \"\") + (r.checked ? \" layui-tree-checkedFirst\" : \"\") + '\"&gt;', '&lt;div class=\"layui-tree-entry ' + (l ? \"taller\" : \"\") + '\" &gt;', '&lt;div class=\"layui-tree-main\"&gt;', function () { //TODO 源码调整 //return t.showLine ? l ? '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon ' + (r.spread ? \"layui-icon-subtraction\" : \"layui-icon-addition\") + '\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-icon layui-icon-file\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-tree-iconArrow ' + (l ? \"\" : c) + '\"&gt;&lt;/i&gt;&lt;/span&gt;' return t.showLine ? l ? '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon ' + (r.spread ? \"layui-icon-subtraction\" : \"layui-icon-addition\") + '\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon layui-icon-file\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-icon ' + ( r.spread ? \"layui-tree-active\" : \"layui-tree-iconArrow\") + (l ? \"\" : c)+' \"&gt;&lt;/i&gt;&lt;/span&gt;' }(), function () { return t.showCheckbox ? '&lt;input type=\"checkbox\" name=\"' + (r.field || \"layuiTreeCheck_\" + r.id) + '\" same=\"layuiTreeCheck\" lay-skin=\"primary\" ' + (r.disabled ? \"disabled\" : \"\") + ' value=\"' + r.id + '\"&gt;' : \"\" }(), function () { //TODO 修改源码 显示title //return t.isJump &amp;&amp; r.href ? '&lt;a href=\"' + r.href + '\" target=\"_blank\" class=\"' + y + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/a&gt;\" : '&lt;span class=\"' + y + (r.disabled ? \" \" + d : \"\") + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/span&gt;\" return t.isJump &amp;&amp; r.href ? '&lt;a title=\"' + (r.title || r.label || t.text.defaultNodeName) + '\" href=\"' + r.href + '\" target=\"_blank\" class=\"' + y + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/a&gt;\" : '&lt;span title=\"' + (r.title || r.label || t.text.defaultNodeName) + '\" class=\"' + y + (r.disabled ? \" \" + d : \"\") + '\" &gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/span&gt;\" }(), \"&lt;/div&gt;\", function () { if (!t.edit) return \"\"; var e = { add: '&lt;i class=\"layui-icon layui-icon-add-1\" data-type=\"add\"&gt;&lt;/i&gt;', update: '&lt;i class=\"layui-icon layui-icon-edit\" data-type=\"update\"&gt;&lt;/i&gt;', del: '&lt;i class=\"layui-icon layui-icon-delete\" data-type=\"del\"&gt;&lt;/i&gt;' }, i = ['&lt;div class=\"layui-btn-group layui-tree-btnGroup\"&gt;']; return t.edit === !0 &amp;&amp; (t.edit = [\"update\", \"del\"]), \"object\" == typeof t.edit ? (layui.each(t.edit, function (a, n) { i.push(e[n] || \"\") }), i.join(\"\") + \"&lt;/div&gt;\") : void 0 }(), \"&lt;/div&gt;&lt;/div&gt;\"].join(\"\")); l &amp;&amp; (h.append(o), n.tree(o, r.children)), e.append(h), h.prev(\".\" + s)[0] &amp;&amp; h.prev().children(\".layui-tree-pack\").addClass(\"layui-tree-showLine\"), l || h.parent(\".layui-tree-pack\").addClass(\"layui-tree-lineExtend\"), n.spread(h, r), t.showCheckbox &amp;&amp; (r.checked &amp;&amp; n.checkids.push(r.id), n.checkClick(h, r)), t.edit &amp;&amp; n.operate(h, r) }) } 4：修改节点展开方法b.prototype.spread，修改后代码如下【备注：//TODO 部分标识的为修改源码部分】 1234567891011121314151617181920212223242526272829303132333435363738394041b.prototype.spread = function (e, a) { var n = this, t = n.config, r = e.children(\".\" + p), l = r.children(\".\" + f), c = r.find(\".\" + o), k = r.find(\".\" + y), m = t.onlyIconControl ? c : l, x = \"\"; m.on(\"click\", function (i) { var ax = e.children(\".\" + v),//TODO a冲突 改成ax //TODO 修改源码 //n = m.children(\".layui-icon\")[0] ? m.children(\".layui-icon\") : m.find(\".layui-tree-icon\").children(\".layui-icon\"); n = m.children(\".layui-icon\")[0] ? m.find(\".layui-tree-iconClick\").children(\".layui-icon\") : m.find(\".layui-tree-icon\").children(\".layui-icon\"); if (ax[0]) { //TODO a改为ax //TODO 展开节点 if (!e.hasClass(c) &amp;&amp; !e.hasClass(C)) { t.spread &amp;&amp; t.spread({ elem: e, state: a.children.length &gt; 0, data: a }) } //TODO 注释掉源码 /*if (e.hasClass(C)) e.removeClass(C), a.slideUp(200), n.removeClass(u).addClass(h); else if (e.addClass(C), a.slideDown(200), n.addClass(u).removeClass(h), t.accordion) { var r = e.siblings(\".\" + s); r.removeClass(C), r.children(\".\" + v).slideUp(200), r.find(\".layui-tree-icon\").children(\".layui-icon\").removeClass(u).addClass(h) }*/ //TODO 节点展开效果调整 添加Begin if (e.hasClass(C) &amp;&amp; !$(i.target).hasClass(\"layui-tree-txt\")) { e.removeClass(C), ax.slideUp(200) //修改源码，调整无实线状态时三角图标有动画 if (!t.showLine) { m.find('span .layui-icon').removeClass(aa).addClass(bb) } else { n.removeClass(u).addClass(h) } } else if (e.addClass(C), ax.slideDown(200), n.addClass(u).removeClass(h), t.accordion) { var r = e.siblings(\".\" + s); r.removeClass(C), r.children(\".\" + v).slideUp(200), r.find(\".layui-tree-icon\").children(\".layui-icon\").removeClass(u).addClass(h) } else if (!t.showLine) { m.find('span .layui-icon').removeClass(bb).addClass(aa) } //TODO 节点展开效果调整 添加End } else x = \"normal\" }) 5：b.prototype.spread 方法修改中，有两处样式添加 aa 、bb:如下所示 需要在tree.js中顶部样式变量处添加。12345c = \"layui-hide\", d = \"layui-disabled\", s = \"layui-tree-set\", o = \"layui-tree-iconClick\", h = \"layui-icon-addition\", u = \"layui-icon-subtraction\", p = \"layui-tree-entry\", f = \"layui-tree-main\", y = \"layui-tree-txt\", v = \"layui-tree-pack\", C = \"layui-tree-spread\", k = \"layui-tree-setLineShort\", m = \"layui-tree-showLine\", x = \"layui-tree-lineExtend\" , aa = \"layui-tree-active\", bb = \"layui-tree-iconArrow\", //TODO 添加aa、bb两个样式 步骤2：方案落地解决问题1：异步加载子节点下面是狐小E智慧办公中台后台通讯录模块中，部门树渲染加载的业务逻辑，其核心概念就是通过父节点ID查询子节点数据，绑定tree组件的spread函数，捕捉节点的展开事件，用户点击树节点，根据当前节点ID查询下一级节点，如果children节点有数据，则调用tree的children函数动态地渲染子节点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//获取部门树function LoadDeptTree() { $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=0\", dataType: \"json\", async: true, type: \"GET\", success: function (resp) { if (resp &amp;&amp; resp.msgcode == 0) { //无连接线风格 deptTree =tree.render({ elem: '#leftTreeArea' ,id:'leftTreeArea' , data: resp.data , showLine: false //是否开启连接线 , click: editDept , spread: function (obj) { if (!obj.state) { // 懒加载子节点，异步获取data数据 这里根据obj.data.id向后台请求当前节点数据 $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=\"+obj.data.id, dataType: \"json\", async: true, type: \"GET\", success: function (resp) { //当前节点展开，如果下一层有children，则调用树的children方法，动态渲染子节点 if (resp &amp;&amp; resp.msgcode == 0) { //第一个参数是树绑定的页面元素ID //第二个参数是当前展开节点的ID //第三个参数是当前节点子节点的数据（数据格式参照layui的tree组件数据格式） tree.children(deptTree.config.id, obj.data.id, resp.data); } } }); } } }); } else { alert(\"加载部门树失败\") } }, error:function(XMLHttpRequest, textStatus, error){ if (error.code == 19) { window.location.reload(); }else{ alert(\"加载部门树失败\"); } } });} 解决问题2：父部门添加子部门，局部动态更新视图选中父部门，动态地为父部门添加一个子部门，添加成功将新增的子部门局部渲染到整体部门树中。 1234567891011121314151617181920//重新渲染树节点function refreshTreeNode(treeNodeId,treeNodeName) { $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=\"+treeNodeId, dataType: \"json\", async: true, type: \"GET\", success: function (resp) { if (resp &amp;&amp; resp.msgcode == 0) { tree.children(deptTree.config.id, treeNodeId, resp.data); if (treeNodeName) { //修改节点名称 $(\"div[data-id='\"+treeNodeId+\"']\").find(\".layui-tree-txt\").eq(0).html(treeNodeName).attr(\"title\",treeNodeName); } //光标重新定位到当前节点 $(\"div[data-id='\"+treeNodeId+\"']\").find(\".layui-tree-entry\").eq(0).addClass(\"layui-table-click\"); } } });}","link":"/2020/06/11/layui-tree%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%87%92%E5%8A%A0%E8%BD%BD%E4%BB%A5%E5%8F%8A%E5%8A%A8%E6%80%81%E5%B1%80%E9%83%A8%E6%B8%B2%E6%9F%93%E5%AD%90%E8%8A%82%E7%82%B9/"},{"title":"layui-tree如何实现懒加载以及动态局部渲染子节点","text":"问题引入众所周知，layui.tree的树形控件，在渲染树节点时，需要后台准备好整个组织树的数据；如果组织树的数据量特别大，页面渲染特别慢。最近在狐小E智慧办公平台中，展示企业部门树时，就遇到这种问题；当时产品要求，部门树渲染要特别快，同时某部门下新增、删除了一个子部门时，要动态刷新，实时呈现；然而layui.tree的原始机制是，必须重新加载整个树的数据再渲染，这样就会导致展开的节点全收缩回去，而不是刚好展开到该父部门位置； 这样就有2个问题亟需优化 1）部门树数据量大、层级多时，全部渲染慢。 2）父部门添加子部门，当前父部门层级树无法做到局部更新视图； 为了解决这两个问题，我们只好修改layui.tree源码，实现这个高大上功能；废话不多说，直接上干货： 狐小E智慧办公中台后台使用的layui版本是v2.5.x,其他版本的layui源码可能有所不同，这点需注意。 解决方案步骤1：源码修改首先，在layui前端框架找到实现树组件的模块源码tree.js，如图所示： 1：打开源码，在树的主渲染方法 r.render前，添加上用于加载child节点的方法r.children，代码如下： 1234 r.children = function (e, i, d) { var a = l.that[e]; return a.children(i, d)} 效果如下图： 2：找到b.prototype.tree方法，在此方法前，添加两个用于懒加载子节点的方法： 1234567891011121314151617181920212223242526272829303132333435363738b.prototype.children = function (n1, n2) { var e = this; e.setchildrendata(e.config.data, n1, n2);}, b.prototype.setchildrendata = function (n0, n1, n2) { var e = this; var c = i('#' + e.config.id); layui.each(n0, function (a, r) { var b = c.find('div[data-id=' + r.id + ']').hasClass(C); r.spread = b; if (e.config.accordion === !0) { //手风琴模式 r.spread = !1; var cs = c.find('div[data-id=' + n1 + ']').parents('.layui-tree-set'); cs.each(function () { if (r.id === i(this).attr('data-id')) { r.spread = !0; } }); } if (r.id === n1) { r.spread = !0; if(!r.children){ r.children=[]; } if (n2.length === 0) { delete r.children; }else{ //i.extend(!0, r.children, n2); r.children = n2; } e.reload(e.config.id, e.config.data); } if (r.children) { e.setchildrendata(r.children, n1, n2); //递归子节点 } });} 3：修改b.prototype.tree方法的代码，修改后代码如下【备注：//TODO 部分标识的为修改源码部分】 123456789101112131415161718192021222324252627282930313233b.prototype.tree = function (e, a) { var n = this, t = n.config, r = a || t.data; layui.each(r, function (a, r) { //TODO 此处调整源码 //var l = r.children &amp;&amp; r.children.length &gt; 0, var l = r.children, o = i('&lt;div class=\"layui-tree-pack\" ' + (r.spread ? 'style=\"display: block;\"' : \"\") + '\"&gt;&lt;/div&gt;'), //TODO 源码调整 //h = i(['&lt;div data-id=\"' + r.id + '\" class=\"layui-tree-set' + (r.spread ? \" layui-tree-spread\" : \"\") + (r.checked ? \" layui-tree-checkedFirst\" : \"\") + '\"&gt;', '&lt;div class=\"layui-tree-entry\"&gt;', '&lt;div class=\"layui-tree-main\"&gt;', function () { h = i(['&lt;div data-id=\"' + r.id + '\" data-parent-id=\"' + r.parentId + '\" class=\"layui-tree-set' + (r.spread ? \" layui-tree-spread\" : \"\") + (r.checked ? \" layui-tree-checkedFirst\" : \"\") + '\"&gt;', '&lt;div class=\"layui-tree-entry ' + (l ? \"taller\" : \"\") + '\" &gt;', '&lt;div class=\"layui-tree-main\"&gt;', function () { //TODO 源码调整 //return t.showLine ? l ? '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon ' + (r.spread ? \"layui-icon-subtraction\" : \"layui-icon-addition\") + '\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-icon layui-icon-file\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-tree-iconArrow ' + (l ? \"\" : c) + '\"&gt;&lt;/i&gt;&lt;/span&gt;' return t.showLine ? l ? '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon ' + (r.spread ? \"layui-icon-subtraction\" : \"layui-icon-addition\") + '\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick layui-tree-icon\"&gt;&lt;i class=\"layui-icon layui-icon-file\"&gt;&lt;/i&gt;&lt;/span&gt;' : '&lt;span class=\"layui-tree-iconClick\"&gt;&lt;i class=\"layui-icon ' + ( r.spread ? \"layui-tree-active\" : \"layui-tree-iconArrow\") + (l ? \"\" : c)+' \"&gt;&lt;/i&gt;&lt;/span&gt;' }(), function () { return t.showCheckbox ? '&lt;input type=\"checkbox\" name=\"' + (r.field || \"layuiTreeCheck_\" + r.id) + '\" same=\"layuiTreeCheck\" lay-skin=\"primary\" ' + (r.disabled ? \"disabled\" : \"\") + ' value=\"' + r.id + '\"&gt;' : \"\" }(), function () { //TODO 修改源码 显示title //return t.isJump &amp;&amp; r.href ? '&lt;a href=\"' + r.href + '\" target=\"_blank\" class=\"' + y + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/a&gt;\" : '&lt;span class=\"' + y + (r.disabled ? \" \" + d : \"\") + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/span&gt;\" return t.isJump &amp;&amp; r.href ? '&lt;a title=\"' + (r.title || r.label || t.text.defaultNodeName) + '\" href=\"' + r.href + '\" target=\"_blank\" class=\"' + y + '\"&gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/a&gt;\" : '&lt;span title=\"' + (r.title || r.label || t.text.defaultNodeName) + '\" class=\"' + y + (r.disabled ? \" \" + d : \"\") + '\" &gt;' + (r.title || r.label || t.text.defaultNodeName) + \"&lt;/span&gt;\" }(), \"&lt;/div&gt;\", function () { if (!t.edit) return \"\"; var e = { add: '&lt;i class=\"layui-icon layui-icon-add-1\" data-type=\"add\"&gt;&lt;/i&gt;', update: '&lt;i class=\"layui-icon layui-icon-edit\" data-type=\"update\"&gt;&lt;/i&gt;', del: '&lt;i class=\"layui-icon layui-icon-delete\" data-type=\"del\"&gt;&lt;/i&gt;' }, i = ['&lt;div class=\"layui-btn-group layui-tree-btnGroup\"&gt;']; return t.edit === !0 &amp;&amp; (t.edit = [\"update\", \"del\"]), \"object\" == typeof t.edit ? (layui.each(t.edit, function (a, n) { i.push(e[n] || \"\") }), i.join(\"\") + \"&lt;/div&gt;\") : void 0 }(), \"&lt;/div&gt;&lt;/div&gt;\"].join(\"\")); l &amp;&amp; (h.append(o), n.tree(o, r.children)), e.append(h), h.prev(\".\" + s)[0] &amp;&amp; h.prev().children(\".layui-tree-pack\").addClass(\"layui-tree-showLine\"), l || h.parent(\".layui-tree-pack\").addClass(\"layui-tree-lineExtend\"), n.spread(h, r), t.showCheckbox &amp;&amp; (r.checked &amp;&amp; n.checkids.push(r.id), n.checkClick(h, r)), t.edit &amp;&amp; n.operate(h, r) }) } 4：修改节点展开方法b.prototype.spread，修改后代码如下【备注：//TODO 部分标识的为修改源码部分】 1234567891011121314151617181920212223242526272829303132333435363738394041b.prototype.spread = function (e, a) { var n = this, t = n.config, r = e.children(\".\" + p), l = r.children(\".\" + f), c = r.find(\".\" + o), k = r.find(\".\" + y), m = t.onlyIconControl ? c : l, x = \"\"; m.on(\"click\", function (i) { var ax = e.children(\".\" + v),//TODO a冲突 改成ax //TODO 修改源码 //n = m.children(\".layui-icon\")[0] ? m.children(\".layui-icon\") : m.find(\".layui-tree-icon\").children(\".layui-icon\"); n = m.children(\".layui-icon\")[0] ? m.find(\".layui-tree-iconClick\").children(\".layui-icon\") : m.find(\".layui-tree-icon\").children(\".layui-icon\"); if (ax[0]) { //TODO a改为ax //TODO 展开节点 if (!e.hasClass(c) &amp;&amp; !e.hasClass(C)) { t.spread &amp;&amp; t.spread({ elem: e, state: a.children.length &gt; 0, data: a }) } //TODO 注释掉源码 /*if (e.hasClass(C)) e.removeClass(C), a.slideUp(200), n.removeClass(u).addClass(h); else if (e.addClass(C), a.slideDown(200), n.addClass(u).removeClass(h), t.accordion) { var r = e.siblings(\".\" + s); r.removeClass(C), r.children(\".\" + v).slideUp(200), r.find(\".layui-tree-icon\").children(\".layui-icon\").removeClass(u).addClass(h) }*/ //TODO 节点展开效果调整 添加Begin if (e.hasClass(C) &amp;&amp; !$(i.target).hasClass(\"layui-tree-txt\")) { e.removeClass(C), ax.slideUp(200) //修改源码，调整无实线状态时三角图标有动画 if (!t.showLine) { m.find('span .layui-icon').removeClass(aa).addClass(bb) } else { n.removeClass(u).addClass(h) } } else if (e.addClass(C), ax.slideDown(200), n.addClass(u).removeClass(h), t.accordion) { var r = e.siblings(\".\" + s); r.removeClass(C), r.children(\".\" + v).slideUp(200), r.find(\".layui-tree-icon\").children(\".layui-icon\").removeClass(u).addClass(h) } else if (!t.showLine) { m.find('span .layui-icon').removeClass(bb).addClass(aa) } //TODO 节点展开效果调整 添加End } else x = \"normal\" }) 5：b.prototype.spread 方法修改中，有两处样式添加 aa 、bb:如下所示 ​ 需要在tree.js中顶部样式变量处添加。 12345c = \"layui-hide\", d = \"layui-disabled\", s = \"layui-tree-set\", o = \"layui-tree-iconClick\", h = \"layui-icon-addition\", u = \"layui-icon-subtraction\", p = \"layui-tree-entry\", f = \"layui-tree-main\", y = \"layui-tree-txt\", v = \"layui-tree-pack\", C = \"layui-tree-spread\", k = \"layui-tree-setLineShort\", m = \"layui-tree-showLine\", x = \"layui-tree-lineExtend\" , aa = \"layui-tree-active\", bb = \"layui-tree-iconArrow\", //TODO 添加aa、bb两个样式 步骤2：方案落地解决问题1：异步加载子节点下面是狐小E智慧办公中台后台通讯录模块中，部门树渲染加载的业务逻辑，其核心概念就是通过父节点ID查询子节点数据，绑定tree组件的spread函数，捕捉节点的展开事件，用户点击树节点，根据当前节点ID查询下一级节点，如果children节点有数据，则调用tree的children函数动态地渲染子节点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//获取部门树function LoadDeptTree() { $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=0\", dataType: \"json\", async: true, type: \"GET\", success: function (resp) { if (resp &amp;&amp; resp.msgcode == 0) { //无连接线风格 deptTree =tree.render({ elem: '#leftTreeArea' ,id:'leftTreeArea' , data: resp.data , showLine: false //是否开启连接线 , click: editDept , spread: function (obj) { if (!obj.state) { // 懒加载子节点，异步获取data数据 这里根据obj.data.id向后台请求当前节点数据 $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=\"+obj.data.id, dataType: \"json\", async: true, type: \"GET\", success: function (resp) { //当前节点展开，如果下一层有children，则调用树的children方法，动态渲染子节点 if (resp &amp;&amp; resp.msgcode == 0) { //第一个参数是树绑定的页面元素ID //第二个参数是当前展开节点的ID //第三个参数是当前节点子节点的数据（数据格式参照layui的tree组件数据格式） tree.children(deptTree.config.id, obj.data.id, resp.data); } } }); } } }); } else { alert(\"加载部门树失败\") } }, error:function(XMLHttpRequest, textStatus, error){ if (error.code == 19) { window.location.reload(); }else{ alert(\"加载部门树失败\"); } } });} 解决问题2：父部门添加子部门，局部动态更新视图选中父部门，动态地为父部门添加一个子部门，添加成功将新增的子部门局部渲染到整体部门树中。 1234567891011121314151617181920//重新渲染树节点function refreshTreeNode(treeNodeId,treeNodeName) { $.ajax({ url: \"${ctx}/dept/tree/one-level?parentId=\"+treeNodeId, dataType: \"json\", async: true, type: \"GET\", success: function (resp) { if (resp &amp;&amp; resp.msgcode == 0) { tree.children(deptTree.config.id, treeNodeId, resp.data); if (treeNodeName) { //修改节点名称 $(\"div[data-id='\"+treeNodeId+\"']\").find(\".layui-tree-txt\").eq(0).html(treeNodeName).attr(\"title\",treeNodeName); } //光标重新定位到当前节点 $(\"div[data-id='\"+treeNodeId+\"']\").find(\".layui-tree-entry\").eq(0).addClass(\"layui-table-click\"); } } });}","link":"/2020/06/11/%E6%8A%80%E6%9C%AF%E8%BD%AF%E6%96%87%EF%BC%9Alayui-tree%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E7%88%B6%E8%8A%82%E7%82%B9%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E6%8D%AE/"}],"tags":[],"categories":[]}