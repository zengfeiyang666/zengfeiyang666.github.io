{"pages":[{"title":"About me","text":"","link":"/about/me.html"},{"title":"美好瞬间","text":"","link":"/photo/index.html"},{"title":"","text":"[{\"img\":\"/json-data/banner/lonelyreader.png\",\"url\":\"https://lonelyreader.com\",\"alt\":\"孤独的阅读者\"},{\"img\":\"/json-data/banner/blog-build.png\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=89247\",\"alt\":\"博客搭建视频教程\"},{\"img\":\"/json-data/banner/git-github.jpg\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=84534\",\"alt\":\"让你彻底理解Git视频教程\"}]","link":"/json-data/main-banner.json"}],"posts":[{"title":"HTTP协议相关","text":"状态码目前 RFC 标准里规定的状态码是三位数，所以取值范围就是从 000 到 999。但如果把代码简单地从 000 开始顺序编下去就显得有点太“low”，不灵活、不利于扩展，所以状态码也被设计成有一定的格式。 RFC 标准把状态码分成了五类，用数字的第一位表示分类，而 099 不用，这样状态码的实际可用范围就大大缩小了，由 000999 变成了 100~599。 这五类的具体含义是： 1××：提示信息，表示目前是协议处理的中间状态，还需要后续的操作； 2××：成功，报文已经收到并被正确处理； 3××：重定向，资源位置发生变动，需要客户端重新发送请求； 4××：客户端错误，请求报文有误，服务器无法处理； 5××：服务器错误，服务器在处理请求时内部发生了错误。 3××3××类状态码表示客户端请求的资源发生了变动，客户端必须用新的 URI 重新发送请求获取资源，也就是通常所说的“重定向”，包括著名的 301、302 跳转。 “301 Moved Permanently”俗称“永久重定向”，含义是此次请求的资源已经不存在了，需要改用改用新的 URI 再次访问。 与它类似的是“302 Found”，曾经的描述短语是“Moved Temporarily”，俗称“临时重定向”，意思是请求的资源还在，但需要暂时用另一个 URI 来访问。 301 和 302 都会在响应头里使用字段 Location 指明后续要跳转的 URI，最终的效果很相似，浏览器都会重定向到新的 URI。两者的根本区别在于语义，一个是“永久”，一个是“临时”，所以在场景、用法上差距很大。 比如，你的网站升级到了 HTTPS，原来的 HTTP 不打算用了，这就是“永久”的，所以要配置 301 跳转，把所有的 HTTP 流量都切换到 HTTPS。 再比如，今天夜里网站后台要系统维护，服务暂时不可用，这就属于“临时”的，可以配置成 302 跳转，把流量临时切换到一个静态通知页面，浏览器看到这个 302 就知道这只是暂时的情况，不会做缓存优化，第二天还会访问原来的地址。","link":"/2020/04/06/HTTP%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3/"},{"title":"Hexo博客中图片显示问题","text":"1. 发现问题在HEXO发布的博文中，查看网页中的文章时，发现文章中的图片均不能查看，只是显示了图片的标题问题，查看控制台中的请求的数据发现，文章页面中的图片资源均是加载失败，对于在HEXO博客中的问题图片问题进行分析解决； 2. 解决问题方法 把HEXO配置文件 _config.yml中的post_asset_folder属性以及 permalink 属性， 1234# 是否启动资源文件夹，开启后通过 hexo new title ,(title为文章标题)生成新文章会建立一个同名的文件夹post_asset_folder: true# 生成文章链接的格式，这是默认的格式；修改的规则也比较简单，标签前面要加英文冒号；（注意图片资源生成的格式必须是这个格式，否则会出现图片加载失败的情况）permalink: :year/:month/:day/:title/ ​ 2.安装一个可以上传本地图片的插件，在HEXO项目的根目录下输入 1sudo npm install https://github.com/CodeFalling/hexo-asset-image --save ​ 3.再运行 hexo new post title 来生成 _posts 目录的MD文档时，在 /source/_posts 文件夹内会 建立一个与title文件同名的文件夹，结构如下 1234文章名称├── bird.jpg└── mouse.jpg文章名称.md ​ 4.在title.md文档中想引入图片时，先把图片复制到title.md这个文件夹中，然后只需要在文档中按照 markdown 的格式引入图片即可，如下： 1![图片标题](title/name.jpg) ​ 5.执行hexo打包命令hexo g，可以在本地项目根目录下的public文件夹查看生成的文件形式，再执行上传 命令hexo d后，就能在网页上查看到文字的图片资源了； ​ 6.打开博客文章的网页控制台，可以查看到图片资源引入的格式为： 1&lt;img src=\"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/%E5%8F%91%E5%B8%83%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"&gt; 最后完成了博客文章的图片资源的显示，如下图所示：","link":"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"},{"title":"Hexo搭建博客，注册域名，部署到GitHub","text":"1、Hexo搭建博客步骤暂时略过 2、注册域名 在腾讯云购买域名flymoon1028.com. 进行实名认证，域名备案（我申报后大概3小时就通过了，这个根据情况而定）。 备案通过后进行域名解析1）打开iTerm,输入ping命令，得到github上博客IP地址 1ping zengfeiyang666.github.io 得到GitHub博客的IP地址185.199.109.153 2）登录腾讯云平台，进行域名解析 4.GitHub和域名绑定 ​ 1）登录github博客项目，在博客根目录下创建文件名为：CNAME的文件，内容为域名： ​ www.flymoon1028.com ​ 3、通过绑定好的域名访问博客","link":"/2020/03/27/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/"},{"title":"Java编程技能点记录","text":"技术框架MyBatis-PlusMyBatis-Plus 官网 https://mp.baomidou.com MyBatis-Plus 视频教程 MyBatis-Plus入门 https://www.imooc.com/learn/1130 MyBatis-Plus进阶 https://www.imooc.com/learn/1171","link":"/2020/04/07/Java%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD%E7%82%B9%E8%AE%B0%E5%BD%95/"},{"title":"Linux操作命令","text":"Linux操作命令1：使用rm -rf 目录名字 命令即可 ​ -r 就是向下递归，不管有多少级目录，一并删除​ -f 就是直接强行删除，不作任何提示的意思 rm 不带参数 只能删除文件​ 例如：rm test.txt，删除文件test.txt","link":"/2020/04/01/Linux%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"},{"title":"Mac中执行svn命令失效","text":"今天到公司，打开IDEA准备从SVN更新代码，显示无法连接SVN。What?搞什么鬼！ 打开iTerm,输入svn –version，想看一下svn版本号，确认一下svn是否真不可用了，果不其然，效果如图： 看到这个报错，以为没有安装Xcode,晚上搜索了下，执行xcode-select –install命令，提示如图： 可见，xcode没问题，接下来又是一顿各种搜索，什么重装xcode、重装comman line，貌似都不起作用。 经过一上午折腾，最终根据一篇博文提示，要不用brew重装一下svn，试下再说吧。 安装一切顺利，接下来再执行一下svn –version命令 svn命令正常了！ 又可以在IDEA中用svn愉快地提交代码了！ （PS：至于问题为什么这样解决，仍不是很明了，先记录一下）","link":"/2020/03/27/Mac%E4%B8%AD%E6%89%A7%E8%A1%8Csvn%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88/"},{"title":"临时记录","text":"临时记录“爬虫”（Crawler） TCP/IP分层设计思想TCP/IP 当初的设计者真的是非常聪明，创造性地提出了“分层”的概念，把复杂的网络通信划分出多个层次，再给每一个层次分配不同的职责，层次内只专心做自己的事情就好，用“分而治之”的思想把一个“大麻烦”拆分成了数个“小麻烦”，从而解决了网络通信的难题。 域名的形式在第 4 讲曾经说过，域名是一个有层次的结构，是一串用“.”分隔的多个单词，最右边的被称为“顶级域名”，然后是“二级域名”，层级关系向左依次降低。 最左边的是主机名，通常用来表明主机的用途，比如“www”表示提供万维网服务、“mail”表示提供邮件服务，不过这也不是绝对的，名字的关键是要让我们容易记忆。 看一下极客时间的域名“time.geekbang.org”，这里的“org”就是顶级域名，“geekbang”是二级域名，“time”则是主机名。使用这个域名，DNS 就会把它转换成相应的 IP 地址，你就可以访问极客时间的网站了。 域名的解析就像 IP 地址必须转换成 MAC 地址才能访问主机一样， 域名也必须要转换成 IP 地址，这个过程就是“域名解析”。","link":"/2020/04/03/%E4%B8%B4%E6%97%B6%E8%AE%B0%E5%BD%95/"},{"title":"前后端分离-概览","text":"SPASPA（single page web application），单页面应用，是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，而非传统的从服务器重新加载整个新页面。这种方法避免了页面之间切换打断用户体验，使应用程序更像一个桌面应用程序。在单页应用中，所有必要的代码（ HTML、JavaScript 和 CSS ）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面。SPA 有一个缺点，因为 SPA 应用部署后只有1个页面，而且这个页面只是一堆 js 、css 引用，没有其他有效价值，因此，SPA 应用不易被搜索引擎收录，所以，一般来说，SPA 适合做大型企业后台管理系统。 Vue 使用方式大致上可以分为两大类： 直接将Vue在页面中引入，不做 SPA 应用 SPA应用","link":"/2020/04/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB-%E6%A6%82%E8%A7%88/"},{"title":"浏览器缓存之Jquery自动给所有Ajax请求加上时间戳","text":"在使用 jQuery 请求数据时，我们可能希望它能自动附带上一些额外的参数。比如： 让所有请求自动加上时间戳，这样每次请求就不会有缓存。 或者让所有请求自动带上权限认证的 token，这样不用再为每个请求单独添加这个参数。 下面通过样例演示这个功能如何实现。 1，样例代码（1）这里我们使用 jQuery 的 ajaxSetup() 方法来进行全局配置，该方法可以为将来所有的 AJAX 请求设置默认值。（2）通过 ajaxSetup() 方法中的 beforeSend 属性可以设置发送请求前运行的函数（它会拦截所有的请求)，我们在此对 url 进行修改，增加个时间戳参数。 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=&quot;jquery-3.1.1.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //全局配置 $.ajaxSetup({ beforeSend: function(jqXHR, settings) { //在请求前给修改url（增加一个时间戳参数） settings.url += settings.url.match(/\\?/) ? &quot;&amp;&quot; : &quot;?&quot;; settings.url += &quot;token=&quot; + new Date().getTime(); }, }); //按钮点击响应 function btnClick() { $.get(&quot;data.php&quot;, {name: &quot;hangge&quot;}, function(data){ alert(data); }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;请求数据&quot; onclick=&quot;btnClick()&quot;/&gt; &lt;/body&gt;&lt;/html&gt; 2，效果图点击“请求数据”按钮发起一个简单的get请求。可以看到虽然我们一开始只设置了name 这一个参数，但最终又自动添加了个 token（时间戳）参数。","link":"/2020/03/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E4%B9%8BjQuery%E8%87%AA%E5%8A%A8%E7%BB%99%E6%89%80%E6%9C%89Ajax%E8%AF%B7%E6%B1%82%E5%8A%A0%E4%B8%8A%E6%97%B6%E9%97%B4%E6%88%B3/"},{"title":"前端资源收藏","text":"前端资源收藏1：轮播图插件swiper [https://www.swiper.com.cn]","link":"/2020/04/01/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E6%94%B6%E8%97%8F/"}],"tags":[],"categories":[]}