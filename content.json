{"pages":[{"title":"About me","text":"","link":"/about/me.html"},{"title":"","text":"[{\"img\":\"/json-data/banner/lonelyreader.png\",\"url\":\"https://lonelyreader.com\",\"alt\":\"孤独的阅读者\"},{\"img\":\"/json-data/banner/blog-build.png\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=89247\",\"alt\":\"博客搭建视频教程\"},{\"img\":\"/json-data/banner/git-github.jpg\",\"url\":\"https://space.bilibili.com/386767453/channel/detail?cid=84534\",\"alt\":\"让你彻底理解Git视频教程\"}]","link":"/json-data/main-banner.json"},{"title":"美好瞬间","text":"","link":"/photo/index.html"}],"posts":[{"title":"Hexo博客中图片显示问题","text":"1. 发现问题在HEXO发布的博文中，查看网页中的文章时，发现文章中的图片均不能查看，只是显示了图片的标题问题，查看控制台中的请求的数据发现，文章页面中的图片资源均是加载失败，对于在HEXO博客中的问题图片问题进行分析解决； 2. 解决问题方法 把HEXO配置文件 _config.yml中的post_asset_folder属性以及 permalink 属性， 1234# 是否启动资源文件夹，开启后通过 hexo new title ,(title为文章标题)生成新文章会建立一个同名的文件夹post_asset_folder: true# 生成文章链接的格式，这是默认的格式；修改的规则也比较简单，标签前面要加英文冒号；（注意图片资源生成的格式必须是这个格式，否则会出现图片加载失败的情况）permalink: :year/:month/:day/:title/ ​ 2.安装一个可以上传本地图片的插件，在HEXO项目的根目录下输入 1sudo npm install https://github.com/CodeFalling/hexo-asset-image --save ​ 3.再运行 hexo new post title 来生成 _posts 目录的MD文档时，在 /source/_posts 文件夹内会 建立一个与title文件同名的文件夹，结构如下 1234文章名称├── bird.jpg└── mouse.jpg文章名称.md ​ 4.在title.md文档中想引入图片时，先把图片复制到title.md这个文件夹中，然后只需要在文档中按照 markdown 的格式引入图片即可，如下： 1![图片标题](title/name.jpg) ​ 5.执行hexo打包命令hexo g，可以在本地项目根目录下的public文件夹查看生成的文件形式，再执行上传 命令hexo d后，就能在网页上查看到文字的图片资源了； ​ 6.打开博客文章的网页控制台，可以查看到图片资源引入的格式为： 1&lt;img src=\"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/%E5%8F%91%E5%B8%83%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%84.png\" alt=\"\"&gt; 最后完成了博客文章的图片资源的显示，如下图所示：","link":"/2020/03/27/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"},{"title":"Hexo搭建博客，注册域名，部署到GitHub","text":"1、Hexo搭建博客步骤暂时略过 2、注册域名 在腾讯云购买域名flymoon1028.com. 进行实名认证，域名备案（我申报后大概3小时就通过了，这个根据情况而定）。 备案通过后进行域名解析1）打开iTerm,输入ping命令，得到github上博客IP地址 1ping zengfeiyang666.github.io 得到GitHub博客的IP地址185.199.109.153 2）登录腾讯云平台，进行域名解析 4.GitHub和域名绑定 ​ 1）登录github博客项目，在博客根目录下创建文件名为：CANME的文件，内容为域名：flymoon1028.com ​ 2)在github设置项配置CANME 3、通过绑定好的域名访问博客","link":"/2020/03/27/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%9F%9F%E5%90%8D%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/"},{"title":"Mac中执行svn命令失效","text":"今天到公司，打开IDEA准备从SVN更新代码，显示无法连接SVN。What?搞什么鬼！ 打开iTerm,输入svn –version，想看一下svn版本号，确认一下svn是否真不可用了，果不其然，效果如图： 看到这个报错，以为没有安装Xcode,晚上搜索了下，执行xcode-select –install命令，提示如图： 可见，xcode没问题，接下来又是一顿各种搜索，什么重装xcode、重装comman line，貌似都不起作用。 经过一上午折腾，最终根据一篇博文提示，要不用brew重装一下svn，试下再说吧。 安装一切顺利，接下来再执行一下svn –version命令 svn命令正常了！ 又可以在IDEA中用svn愉快地提交代码了！ （PS：至于问题为什么这样解决，仍不是很明了，先记录一下）","link":"/2020/03/27/Mac%E4%B8%AD%E6%89%A7%E8%A1%8Csvn%E5%91%BD%E4%BB%A4%E5%A4%B1%E6%95%88/"},{"title":"浏览器缓存之Jquery自动给所有Ajax请求加上时间戳","text":"在使用 jQuery 请求数据时，我们可能希望它能自动附带上一些额外的参数。比如： 让所有请求自动加上时间戳，这样每次请求就不会有缓存。 或者让所有请求自动带上权限认证的 token，这样不用再为每个请求单独添加这个参数。 下面通过样例演示这个功能如何实现。 1，样例代码（1）这里我们使用 jQuery 的 ajaxSetup() 方法来进行全局配置，该方法可以为将来所有的 AJAX 请求设置默认值。（2）通过 ajaxSetup() 方法中的 beforeSend 属性可以设置发送请求前运行的函数（它会拦截所有的请求)，我们在此对 url 进行修改，增加个时间戳参数。 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=&quot;jquery-3.1.1.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; //全局配置 $.ajaxSetup({ beforeSend: function(jqXHR, settings) { //在请求前给修改url（增加一个时间戳参数） settings.url += settings.url.match(/\\?/) ? &quot;&amp;&quot; : &quot;?&quot;; settings.url += &quot;token=&quot; + new Date().getTime(); }, }); //按钮点击响应 function btnClick() { $.get(&quot;data.php&quot;, {name: &quot;hangge&quot;}, function(data){ alert(data); }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;请求数据&quot; onclick=&quot;btnClick()&quot;/&gt; &lt;/body&gt;&lt;/html&gt; 2，效果图点击“请求数据”按钮发起一个简单的get请求。可以看到虽然我们一开始只设置了name 这一个参数，但最终又自动添加了个 token（时间戳）参数。","link":"/2020/03/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E4%B9%8BjQuery%E8%87%AA%E5%8A%A8%E7%BB%99%E6%89%80%E6%9C%89Ajax%E8%AF%B7%E6%B1%82%E5%8A%A0%E4%B8%8A%E6%97%B6%E9%97%B4%E6%88%B3/"}],"tags":[],"categories":[]}